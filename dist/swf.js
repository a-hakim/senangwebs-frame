/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["SWF"] = factory();
	else
		root["SWF"] = factory();
})(this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/swf.js":
/*!***********************!*\
  !*** ./src/js/swf.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\r\n * SenangWebs Frame - A lightweight, touch-friendly slider library\r\n * Version 1.1.0\r\n */\nvar SWF = /*#__PURE__*/function () {\n  function SWF(element) {\n    var userConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, SWF);\n    // Allow passing either element or config\n    if (!(element instanceof HTMLElement)) {\n      userConfig = element;\n      element = null;\n    }\n    this.container = element || document.querySelector('[data-swf-items]');\n    if (!this.container) return;\n\n    // Parse data attributes\n    var dataConfig = this.parseDataAttributes(this.container);\n    this.config = _objectSpread(_objectSpread({\n      autoplay: false,\n      autoplayDelay: 3000,\n      animationSpeed: 300,\n      infinite: true,\n      startIndex: 0,\n      responsive: [{\n        breakpoint: 4000,\n        slidesPerView: 1,\n        spacing: 0\n      }]\n    }, dataConfig), userConfig);\n\n    // Ensure responsive config is properly formatted\n    this.normalizeResponsiveConfig();\n    this.state = {\n      currentIndex: this.config.startIndex,\n      isAnimating: false,\n      autoplayInterval: null,\n      touchStartX: 0,\n      touchEndX: 0,\n      isTouching: false,\n      currentBreakpoint: null,\n      slidesPerView: 1,\n      spacing: 0\n    };\n    this.init();\n  }\n  return _createClass(SWF, [{\n    key: \"parseDataAttributes\",\n    value: function parseDataAttributes(element) {\n      var config = {};\n      var booleanAttrs = ['autoplay', 'infinite'];\n      var numberAttrs = ['autoplayDelay', 'animationSpeed', 'startIndex'];\n\n      // Parse boolean attributes\n      booleanAttrs.forEach(function (attr) {\n        var value = element.dataset[\"swf\".concat(attr.charAt(0).toUpperCase()).concat(attr.slice(1))];\n        if (value !== undefined) {\n          config[attr] = value === 'true';\n        }\n      });\n\n      // Parse number attributes\n      numberAttrs.forEach(function (attr) {\n        var value = element.dataset[\"swf\".concat(attr.charAt(0).toUpperCase()).concat(attr.slice(1))];\n        if (value !== undefined) {\n          config[attr] = Number(value);\n        }\n      });\n\n      // Parse responsive settings\n      this.parseResponsiveAttributes(element, config);\n      return config;\n    }\n  }, {\n    key: \"parseResponsiveAttributes\",\n    value: function parseResponsiveAttributes(element, config) {\n      // Try to parse the responsive JSON data attribute\n      var responsiveJson = element.dataset.swfResponsive;\n      if (responsiveJson) {\n        try {\n          var parsed = JSON.parse(responsiveJson);\n          if (Array.isArray(parsed) && parsed.length > 0) {\n            config.responsive = parsed;\n            console.log('Parsed responsive config:', config.responsive);\n          }\n        } catch (e) {\n          console.warn('Invalid JSON in data-swf-responsive:', e);\n        }\n      }\n\n      // Fallback to individual attributes if JSON parsing failed or was empty\n      if (!config.responsive || !config.responsive.length) {\n        var responsive = [];\n        var breakpoint = 0;\n        while (true) {\n          var breakpointAttr = element.dataset[\"swfBreakpoint\".concat(breakpoint)];\n          var slidesAttr = element.dataset[\"swfSlides\".concat(breakpoint)];\n          var spacingAttr = element.dataset[\"swfSpacing\".concat(breakpoint)];\n          if (!breakpointAttr && !slidesAttr && !spacingAttr) {\n            break;\n          }\n          if (breakpointAttr) {\n            responsive.push({\n              breakpoint: parseInt(breakpointAttr, 10) || 4000,\n              slidesPerView: parseInt(slidesAttr, 10) || 1,\n              spacing: parseInt(spacingAttr, 10) || 0\n            });\n          }\n          breakpoint++;\n        }\n        if (responsive.length > 0) {\n          config.responsive = responsive;\n        }\n      }\n    }\n  }, {\n    key: \"normalizeResponsiveConfig\",\n    value: function normalizeResponsiveConfig() {\n      if (!Array.isArray(this.config.responsive)) {\n        this.config.responsive = [{\n          breakpoint: 4000,\n          slidesPerView: 1,\n          spacing: 0\n        }];\n        return;\n      }\n\n      // Validate and fix each breakpoint configuration\n      this.config.responsive = this.config.responsive.map(function (bp) {\n        return {\n          breakpoint: parseInt(bp.breakpoint) || 4000,\n          slidesPerView: Math.max(1, parseInt(bp.slidesPerView) || 1),\n          spacing: Math.max(0, parseInt(bp.spacing) || 0)\n        };\n      });\n\n      // Sort breakpoints in ascending order\n      this.config.responsive.sort(function (a, b) {\n        return a.breakpoint - b.breakpoint;\n      });\n      console.log('Normalized responsive config:', this.config.responsive);\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this = this;\n      // Create track element if it doesn't exist\n      this.track = this.container.querySelector('[data-swf-track]');\n      if (!this.track) {\n        this.track = document.createElement('div');\n        this.track.setAttribute('data-swf-track', '');\n        while (this.container.firstChild) {\n          this.track.appendChild(this.container.firstChild);\n        }\n        this.container.appendChild(this.track);\n      }\n\n      // Set infinite attribute if enabled\n      if (this.config.infinite) {\n        this.track.setAttribute('data-infinite', '');\n      }\n      this.slides = Array.from(this.container.querySelectorAll('[data-swf-item]'));\n\n      // Find controls within the same container scope\n      var controls = this.container.closest('[data-swf-controls]') || this.container.nextElementSibling;\n      if (controls && controls.matches('[data-swf-controls]')) {\n        this.prevButton = controls.querySelector('[data-swf-prev]');\n        this.nextButton = controls.querySelector('[data-swf-next]');\n      }\n      if (!this.slides.length) return;\n\n      // Set transition speed CSS variable\n      this.container.style.setProperty('--swf-transition-speed', \"\".concat(this.config.animationSpeed, \"ms\"));\n      this.setupResponsive();\n      this.setupStyles();\n      this.bindEvents();\n      if (this.config.autoplay) {\n        this.startAutoplay();\n      }\n\n      // Initialize positions\n      this.updateSlidePositions();\n\n      // Add resize observer to handle container width changes\n      this.resizeObserver = new ResizeObserver(function () {\n        _this.setupStyles();\n        _this.updateSlidePositions();\n      });\n      this.resizeObserver.observe(this.container);\n    }\n  }, {\n    key: \"setupResponsive\",\n    value: function setupResponsive() {\n      var width = window.innerWidth;\n      console.log('Current window width:', width);\n\n      // Find the appropriate breakpoint\n      var currentBreakpoint = this.config.responsive[0];\n      var _iterator = _createForOfIteratorHelper(this.config.responsive),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var bp = _step.value;\n          if (width <= bp.breakpoint) {\n            currentBreakpoint = bp;\n            break;\n          }\n        }\n\n        // If no matching breakpoint found, use the largest one\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (!currentBreakpoint) {\n        currentBreakpoint = this.config.responsive[this.config.responsive.length - 1];\n      }\n      var previousBreakpoint = this.state.currentBreakpoint;\n      this.state.currentBreakpoint = currentBreakpoint;\n      this.state.slidesPerView = currentBreakpoint.slidesPerView;\n      this.state.spacing = currentBreakpoint.spacing;\n      console.log('Selected breakpoint:', currentBreakpoint);\n      console.log('Slides per view:', this.state.slidesPerView);\n      console.log('Spacing:', this.state.spacing);\n      return previousBreakpoint !== currentBreakpoint;\n    }\n  }, {\n    key: \"setupStyles\",\n    value: function setupStyles() {\n      if (!this.container || !this.track || !this.slides.length) return;\n      var containerWidth = this.container.offsetWidth;\n      var totalSlides = this.slides.length;\n      var slidesPerView = this.state.slidesPerView;\n      var spacing = this.state.spacing;\n      console.log('Container width:', containerWidth);\n      console.log('Setting up styles with:', {\n        slidesPerView: slidesPerView,\n        spacing: spacing,\n        totalSlides: totalSlides\n      });\n\n      // Calculate slide width accounting for spacing between slides\n      var totalSpacingWidth = spacing * (slidesPerView - 1);\n      var slideWidth = (containerWidth - totalSpacingWidth) / slidesPerView;\n      console.log('Calculated slide width:', slideWidth);\n\n      // Reset track styles\n      this.track.style.display = 'flex';\n      this.track.style.flexWrap = 'nowrap';\n      this.track.style.width = '100%';\n      this.track.style.gap = \"\".concat(spacing, \"px\");\n\n      // Set styles for slides\n      this.slides.forEach(function (slide) {\n        slide.style.flex = \"0 0 \".concat(100 / slidesPerView, \"%\");\n        slide.style.maxWidth = \"\".concat(100 / slidesPerView, \"%\");\n        slide.style.boxSizing = 'border-box';\n      });\n\n      // Store calculated dimensions for position updates\n      this.state.dimensions = {\n        slideWidth: slideWidth,\n        spacing: spacing,\n        containerWidth: containerWidth,\n        slidesPerView: slidesPerView\n      };\n    }\n  }, {\n    key: \"getMaxIndex\",\n    value: function getMaxIndex() {\n      if (!this.slides.length || !this.state.slidesPerView) return 0;\n      var totalSlides = this.slides.length;\n      var slidesPerView = this.state.slidesPerView;\n      return Math.max(0, Math.ceil(totalSlides / slidesPerView) - 1);\n    }\n  }, {\n    key: \"updateSlidePositions\",\n    value: function updateSlidePositions() {\n      if (!this.state.dimensions) return;\n      var containerWidth = this.state.dimensions.containerWidth;\n      var targetPosition = -this.state.currentIndex * containerWidth;\n      this.track.style.transform = \"translateX(\".concat(targetPosition, \"px)\");\n\n      // Update button states if not infinite\n      if (!this.config.infinite) {\n        var maxIndex = this.getMaxIndex();\n        if (this.prevButton) {\n          this.prevButton.disabled = this.state.currentIndex === 0;\n        }\n        if (this.nextButton) {\n          this.nextButton.disabled = this.state.currentIndex === maxIndex;\n        }\n      }\n    }\n  }, {\n    key: \"bindEvents\",\n    value: function bindEvents() {\n      var _this2 = this;\n      if (this.prevButton) {\n        this.prevButton.addEventListener('click', function () {\n          return _this2.prev();\n        });\n      }\n      if (this.nextButton) {\n        this.nextButton.addEventListener('click', function () {\n          return _this2.next();\n        });\n      }\n      this.container.addEventListener('touchstart', this.handleTouchStart.bind(this), {\n        passive: true\n      });\n      this.container.addEventListener('touchmove', this.handleTouchMove.bind(this), {\n        passive: true\n      });\n      this.container.addEventListener('touchend', this.handleTouchEnd.bind(this));\n      window.addEventListener('resize', this.handleResize.bind(this));\n      document.addEventListener('visibilitychange', this.handleVisibilityChange.bind(this));\n    }\n  }, {\n    key: \"handleTouchStart\",\n    value: function handleTouchStart(e) {\n      if (this.state.isAnimating) return;\n      this.state.isTouching = true;\n      this.state.touchStartX = e.touches[0].clientX;\n      if (this.config.autoplay) {\n        this.pauseAutoplay();\n      }\n    }\n  }, {\n    key: \"handleTouchMove\",\n    value: function handleTouchMove(e) {\n      if (!this.state.isTouching || !this.state.dimensions) return;\n      var currentX = e.touches[0].clientX;\n      var diff = this.state.touchStartX - currentX;\n      var containerWidth = this.state.dimensions.containerWidth;\n      var baseTranslate = -(this.state.currentIndex * containerWidth);\n      this.track.style.transform = \"translateX(\".concat(baseTranslate - diff, \"px)\");\n    }\n  }, {\n    key: \"handleTouchEnd\",\n    value: function handleTouchEnd(e) {\n      if (!this.state.isTouching) return;\n      var diff = this.state.touchStartX - e.changedTouches[0].clientX;\n      var threshold = this.container.offsetWidth * 0.15;\n      if (Math.abs(diff) > threshold) {\n        if (diff > 0) {\n          this.next();\n        } else {\n          this.prev();\n        }\n      } else {\n        this.updateSlidePositions();\n      }\n      this.state.isTouching = false;\n      if (this.config.autoplay) {\n        this.startAutoplay();\n      }\n    }\n  }, {\n    key: \"handleResize\",\n    value: function handleResize() {\n      var width = window.innerWidth;\n      console.log('Window resized to:', width);\n      if (this.setupResponsive()) {\n        console.log('Breakpoint changed, updating styles');\n        this.setupStyles();\n        var maxIndex = this.getMaxIndex();\n        if (this.state.currentIndex > maxIndex) {\n          this.state.currentIndex = maxIndex;\n        }\n        this.updateSlidePositions();\n      }\n    }\n  }, {\n    key: \"handleVisibilityChange\",\n    value: function handleVisibilityChange() {\n      if (document.hidden) {\n        this.pauseAutoplay();\n      } else if (this.config.autoplay) {\n        this.startAutoplay();\n      }\n    }\n  }, {\n    key: \"goToSlide\",\n    value: function goToSlide(index) {\n      var _this3 = this;\n      if (this.state.isAnimating) return;\n      var maxIndex = this.getMaxIndex();\n      var targetIndex = index;\n      if (this.config.infinite) {\n        if (index < 0) {\n          targetIndex = maxIndex;\n        } else if (index > maxIndex) {\n          targetIndex = 0;\n        }\n      } else {\n        if (index < 0 || index > maxIndex) {\n          return;\n        }\n      }\n      this.state.isAnimating = true;\n      this.state.currentIndex = targetIndex;\n      this.updateSlidePositions();\n      setTimeout(function () {\n        _this3.state.isAnimating = false;\n        _this3.container.dispatchEvent(new CustomEvent('swf:change', {\n          detail: {\n            index: targetIndex,\n            slide: _this3.slides[targetIndex * _this3.state.slidesPerView]\n          }\n        }));\n      }, this.config.animationSpeed);\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      this.goToSlide(this.state.currentIndex + 1);\n    }\n  }, {\n    key: \"prev\",\n    value: function prev() {\n      this.goToSlide(this.state.currentIndex - 1);\n    }\n  }, {\n    key: \"startAutoplay\",\n    value: function startAutoplay() {\n      var _this4 = this;\n      if (this.state.autoplayInterval) return;\n      this.state.autoplayInterval = setInterval(function () {\n        return _this4.next();\n      }, this.config.autoplayDelay);\n    }\n  }, {\n    key: \"pauseAutoplay\",\n    value: function pauseAutoplay() {\n      if (this.state.autoplayInterval) {\n        clearInterval(this.state.autoplayInterval);\n        this.state.autoplayInterval = null;\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.pauseAutoplay();\n      if (this.resizeObserver) {\n        this.resizeObserver.disconnect();\n      }\n      if (this.prevButton) {\n        this.prevButton.removeEventListener('click', this.prev);\n      }\n      if (this.nextButton) {\n        this.nextButton.removeEventListener('click', this.next);\n      }\n      this.container.removeEventListener('touchstart', this.handleTouchStart);\n      this.container.removeEventListener('touchmove', this.handleTouchMove);\n      this.container.removeEventListener('touchend', this.handleTouchEnd);\n      window.removeEventListener('resize', this.handleResize);\n      document.removeEventListener('visibilitychange', this.handleVisibilityChange);\n\n      // Reset styles\n      this.container.style = '';\n      this.track.style = '';\n      this.slides.forEach(function (slide) {\n        slide.style = '';\n      });\n    }\n  }], [{\n    key: \"initializeAll\",\n    value: function initializeAll() {\n      document.querySelectorAll('[data-swf-items]').forEach(function (container) {\n        new SWF(container);\n      });\n    }\n  }]);\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SWF);\nif (typeof window !== 'undefined') {\n  window.SWF = SWF;\n  // Auto-initialize all carousels when the DOM is ready\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', function () {\n      return SWF.initializeAll();\n    });\n  } else {\n    SWF.initializeAll();\n  }\n}\n\n//# sourceURL=webpack://SWF/./src/js/swf.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/swf.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	__webpack_exports__ = __webpack_exports__["default"];
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});